#!/usr/bin/python

import dbus
import sys
import urllib
import getopt
import gtk
import locale
from xml.dom import minidom
from xml.parsers.expat import ExpatError

import gettext
gettext.install('cellular-connection-wizard')

PROVIDER_DB = '/usr/share/mobile-broadband-provider-info/serviceproviders.xml'

# This is the text used in the title of all dialogs 
DIALOG_TITLE = _("Cellular Data Connection Wizard")

# In each of the dialog boxes that ask the user to select an option,
# we always provide a button that allows the user to manually enter the
# low level settings for their device.  This is the text used in that
# button.
MANUAL_CONFIG = _("Manual Config")

class CancelException(Exception):
    pass

class ManualConfigException(Exception):
    pass

class FakeService:
    def __init__(self, Name, MCC, MNC, Roaming):
        print "FakeService(MCC=%s, MNC=%s, Roaming=%s)" % (MCC, MNC, Roaming)
        self.MCC = MCC
        self.MNC = MNC
        self.Name = Name
        self.Roaming = Roaming.lower() in ['true', 'yes']

    def GetProperties(self):
        return {"MCC": self.MCC, 
                "MNC": self.MNC, 
                "Roaming": self.Roaming,
                "Name": self.Name
                }

    def SetProperty(self, key, value):
        print "FakeService.SetProperty(\'%s\', \'%s\')" % (key, value)

    def Connect(self):
        print "FakeService.Connect()"

def parse_country_codes():
    result = {}
    for line in open("/usr/share/zoneinfo/iso3166.tab", "r"):
        result[line[:2].lower()] = line[3:]
    return result

def get_apns(db, node):
    result = {}
    for apn in node.getElementsByTagName('apn'):
        apn_dic = {}
        apn_dic['name'] = apn.getAttribute('value')
        for key in ['display_name', 
                    'gateway', 
                    'username', 
                    'password', 
                    'dns']:
            apn_dic[key] = []
        for c in apn.childNodes:
            if c.nodeType == c.ELEMENT_NODE:
                if c.tagName == 'name':
                    apn_dic['display_name'].append(c.firstChild.data)
                else:
                    apn_dic[c.tagName].append(c.firstChild.data)
        try:
            result[apn_dic['display_name'][0]] = apn_dic
        except:
            result[apn_dic['name']] = apn_dic
    return result

def get_provider_for_service(db, service):
    MCC = service.GetProperties()['MCC']
    MNC = service.GetProperties()['MNC']
    for nid in db.getElementsByTagName('network-id'):
        if MCC == nid.getAttribute('mcc') and \
                MNC == nid.getAttribute('mnc'):
            for name in \
                    nid.parentNode.parentNode.getElementsByTagName('name'):
                if name.parentNode.tagName == 'provider':
                    return name.firstChild.data

def get_apns_for_service(db, service):
    MCC = service.GetProperties()['MCC']
    MNC = service.GetProperties()['MNC']
    for nid in db.getElementsByTagName('network-id'):
        if MCC == nid.getAttribute('mcc') and \
                MNC == nid.getAttribute('mnc'):
            return get_apns(db, nid.parentNode)
                            
def get_apns_for_provider(db, provider_name):
    for provider in db.getElementsByTagName('provider'):
        for name in provider.getElementsByTagName('name'):
            if name.parentNode.tagName == 'provider' and \
                    provider_name == name.firstChild.data:
                return get_apns(db, provider)

def error_dialog(msg):
    dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, msg)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.run()
    sys.exit(-1)

def select_country_dialog(db):
    # When configuring a device for 3G roaming, we must ask the user for
    # the country that their services is associated with.  This is the 
    # explaination text at the top of the dialog box for selecting the country.
    SELECT_COUNTRY_MSG = _("Select Country")

    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         MANUAL_CONFIG,
                         gtk.RESPONSE_REJECT,
                         gtk.STOCK_OK, 
                         gtk.RESPONSE_ACCEPT))

    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(2, 5, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)
    
    image = gtk.Image()
    image.set_from_stock(gtk.STOCK_NETWORK, gtk.ICON_SIZE_DIALOG)
    table.attach(image, 0, 1, 0, 2)

    label = gtk.Label(SELECT_COUNTRY_MSG)
    table.attach(label, 1, 3, 0, 1)
    label.set_alignment(0.0, 0.5)

    cbox = gtk.combo_box_new_text()
    country_codes = parse_country_codes()
    for node in db.getElementsByTagName("country"):
        if node.getElementsByTagName('gsm'):
            cbox.append_text(country_codes[node.getAttribute('code')])
    cbox.set_active(0)
    table.attach(cbox, 1, 3, 1, 2)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    model = cbox.get_model()
    active = cbox.get_active()
    result = model[active][0]
    dialog.destroy()
    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()
    if response == gtk.RESPONSE_REJECT:
        raise ManualConfigException()
    for code in country_codes:
        if country_codes[code] == result:
            return code.lower()
    # We should only see this if there is a programming error
    raise ValueError(_("Critical Error: Invalid country code"))

def select_provider_dialog(db, cc):
    # When configuring a device for 3G roaming, we must ask the user for
    # their service provider This is the explaination text at the that 
    # dialog box
    SELECT_PROVIDER_MSG = _("Select Provider")

    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         MANUAL_CONFIG,
                         gtk.RESPONSE_REJECT,
                         gtk.STOCK_OK,
                         gtk.RESPONSE_ACCEPT))

    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(2, 5, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)
    
    image = gtk.Image()
    image.set_from_stock(gtk.STOCK_NETWORK, gtk.ICON_SIZE_DIALOG)
    table.attach(image, 0, 1, 0, 2)

    label = gtk.Label(SELECT_PROVIDER_MSG)
    table.attach(label, 1, 3, 0, 1)
    label.set_alignment(0.0, 0.5)

    cbox = gtk.combo_box_new_text()
    for country in db.getElementsByTagName("country"):
        if country.getAttribute('code') == cc:
            for provider in country.getElementsByTagName('provider'):
                if provider.getElementsByTagName('gsm'):
                    for child in provider.childNodes:
                        if child.nodeType == child.ELEMENT_NODE:
                            if child.tagName == 'name':
                                cbox.append_text(child.firstChild.data)
    cbox.set_active(0)
    table.attach(cbox, 1, 3, 1, 2)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    model = cbox.get_model()
    active = cbox.get_active()
    result = model[active][0]
    dialog.destroy()
    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()
    if response == gtk.RESPONSE_REJECT:
        raise ManualConfigException()
    return result

def select_plan_dialog(db, provider):
    # When configuring a device for 3G roaming, we must ask the user to pick
    # one of the service plans associated with their data provider.
    # This is the explaination text at the that dialog box
    SELECT_PROVIDER_PLAN = _("Select your 3G Data Plan")

    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         MANUAL_CONFIG,
                         gtk.RESPONSE_REJECT,
                         gtk.STOCK_OK,
                         gtk.RESPONSE_ACCEPT))

    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(2, 5, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)
    
    image = gtk.Image()
    image.set_from_stock(gtk.STOCK_NETWORK, gtk.ICON_SIZE_DIALOG)
    table.attach(image, 0, 1, 0, 2)

    label = gtk.Label("%s: %s" % (provider, SELECT_PROVIDER_PLAN))
    table.attach(label, 1, 3, 0, 1)
    label.set_alignment(0.0, 0.5)

    cbox = gtk.combo_box_new_text()
    apns = get_apns_for_provider(db, provider)
    for apn in apns:
        cbox.append_text(apn)
    cbox.set_active(0)
    table.attach(cbox, 1, 3, 1, 2)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    model = cbox.get_model()
    active = cbox.get_active()
    result = model[active][0]
    dialog.destroy()
    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()
    if response == gtk.RESPONSE_REJECT:
        raise ManualConfigException()
    return apns[result]

def select_plan_from_service_dialog(db, service):
    # When a user first tries to connect to a given provider, they
    # must select which plan (i.e. pre-paid, unlimited, etc) to use
    # that the associated service provider allows.
    # This is the explaination text used at the top of dialog box.
    SELECT_PROVIDER_PLAN = _("Select your 3G Data Plan")
    
    plans = {}
    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         MANUAL_CONFIG,
                         gtk.RESPONSE_REJECT,
                         gtk.STOCK_CONNECT, 
                         gtk.RESPONSE_ACCEPT))

    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(2, 5, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)
    
    image = gtk.Image()
    image.set_from_stock(gtk.STOCK_NETWORK, gtk.ICON_SIZE_DIALOG)
    table.attach(image, 0, 1, 0, 2)

    label = gtk.Label("%s: %s" % \
                          (get_provider_for_service(db, service), 
                           SELECT_PROVIDER_PLAN))
    table.attach(label, 1, 3, 0, 1)
    label.set_alignment(0.0, 0.5)

    cbox = gtk.combo_box_new_text()
    apns = get_apns_for_service(db, service)
    try:
        for apn in apns:
            cbox.append_text(apn)
    except TypeError:
        raise ManualConfigException()
    cbox.set_active(0)
    table.attach(cbox, 1, 3, 1, 2)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    model = cbox.get_model()
    active = cbox.get_active()
    result = apns[model[active][0]]
    dialog.destroy()
    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()
    if response == gtk.RESPONSE_REJECT:
        raise ManualConfigException()
    return result

def manual_entry_dialog():
    # This is the text we add to the top of the dialog for allowing the user to
    # manually enter configuration settings. This is a single line of nor more
    # then 60 chars wide
    MANUAL_CONFIG_MSG = _("Manual Configuration")

    # The following strings are used as labels for each of the
    # text entry fields that the user uses to manually enter configuration
    # settings.  Each label is a single line of no more then 40 chars
    #
    # PNAME_LABEL - This is a uniqe string that the service provider
    #               uses to identify a give data plan.  This is the only
    #               setting that is required.
    # UNAME_LABEL - This is the userame of a username/password combination
    #               required for some access points.
    # PW_LABEL    - Password required by some access points.
    # GW_LABEL    - Gateway Address required by some access points
    # DNS1_LABEL  - Primary domain name server address required by
    #               some access points
    # DNS2_LABEL  - Backup domain name server address required by
    #               some access points
    # DNS3_LABEL  - Alternate backup domain name server address required by
    #               some access points
    PNAME_LABEL = _("Plan Name: (required)")
    UNAME_LABEL = _("Username:")
    PW_LABEL    = _("Password:")
    GW_LABEL    = _("Gateway:")
    DNS1_LABEL  = _("Primary DNS:")
    DNS2_LABEL  = _("Secondary DNS:")
    DNS3_LABEL  = _("Tertairy DNS:")

    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         gtk.STOCK_CONNECT, 
                         gtk.RESPONSE_ACCEPT))

    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(8, 2, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)

    label = gtk.Label(MANUAL_CONFIG_MSG)
    label.set_max_width_chars(60)
    table.attach(label, 0, 2, 0, 1)
    
    pname_entry = gtk.Entry()
    pname_entry.set_width_chars(24)
    table.attach(pname_entry, 1, 2, 1, 2)
    label = gtk.Label(PNAME_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 1, 2)

    uname_entry = gtk.Entry()
    table.attach(uname_entry, 1, 2, 2, 3)
    label = gtk.Label(UNAME_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 2, 3)

    pw_entry = gtk.Entry()
    table.attach(pw_entry, 1, 2, 3, 4)
    label = gtk.Label(PW_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 3, 4)

    gw_entry = gtk.Entry()
    table.attach(gw_entry, 1, 2, 4, 5)
    label = gtk.Label(GW_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 4, 5)

    dns1_entry = gtk.Entry()
    table.attach(dns1_entry, 1, 2, 5, 6)
    label = gtk.Label(DNS1_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 5, 6)

    dns2_entry = gtk.Entry()
    table.attach(dns2_entry, 1, 2, 6, 7)
    label = gtk.Label(DNS2_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 6, 7)

    dns3_entry = gtk.Entry()
    table.attach(dns3_entry, 1, 2, 7, 8)
    label = gtk.Label(DNS3_LABEL)
    label.set_max_width_chars(60)
    label.set_alignment(0.0, 0.5)
    table.attach(label, 0, 1, 7, 8)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    dialog.destroy()

    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()

    pname = pname_entry.get_text()
    uname = uname_entry.get_text()
    pw = pw_entry.get_text()
    gw = gw_entry.get_text()
    dns1 = dns1_entry.get_text()
    dns2 = dns2_entry.get_text()
    dns3 = dns3_entry.get_text()

    if dns2:
        dns1 = "%s %s" % (dns1, dns2)
    if dns3:
        dns1 = "%s %s" % (dns1, dns3)

    result = {}
    if pname:
        result["name"] = pname
    if uname:
        result["username"] = [uname]
    if pw:
        result["password"] = [pw]
    if gw:
        result["gateway"] = [gw]
    if dns1:
        result["dns"] = [dns1]

    return result

def select_service_dialog (services):
    # If this utility is executed without any arguments specifying which
    # service to configure, then a dialog is used to allow the user to pick
    # from a list of valid services.  This is the explaination text shown
    # at the top of the dialog
    SELECT_SERVICE_MSG = _("Select 3G Service")

    dialog = gtk.Dialog(DIALOG_TITLE,
                        None,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, 
                         gtk.RESPONSE_CANCEL,
                         gtk.STOCK_OK, 
                         gtk.RESPONSE_ACCEPT))
    dialog.set_has_separator(False)
    dialog.set_icon_name(gtk.STOCK_NETWORK)
    dialog.vbox.set_spacing(6)
    
    table = gtk.Table(2, 5, False)
    table.set_row_spacings(6)
    table.set_col_spacings(6)
    table.set_border_width(6)
    
    image = gtk.Image()
    image.set_from_stock(gtk.STOCK_NETWORK, gtk.ICON_SIZE_DIALOG)
    table.attach(image, 0, 1, 0, 2)

    label = gtk.Label(SELECT_SERVICE_MSG)
    table.attach(label, 1, 3, 0, 1)
    label.set_alignment(0.0, 0.5)

    cbox = gtk.combo_box_new_text()
    for service in services:
        if service.GetProperties()["Roaming"]:
            cbox.append_text("%s (Roaming)" % (service.GetProperties()["Name"]))
        else:
            cbox.append_text(service.GetProperties()["Name"])
    cbox.set_active(0)
    table.attach(cbox, 1, 3, 1, 2)

    dialog.vbox.pack_start(table)
    dialog.show_all()
    response = dialog.run()
    model = cbox.get_model()
    active = cbox.get_active()
    result = model[active][0]
    dialog.destroy()
    if response == gtk.RESPONSE_CANCEL:
        raise CancelException()
    if response == gtk.RESPONSE_REJECT:
        raise ManualConfigException()
    return services[active]

def configure_service (service):
    try:
        if service.GetProperties()["Roaming"]:
            # -----------
            # Roaming...
            # -----------
            try:
                cc = select_country_dialog(db)
                provider = select_provider_dialog(db, cc)
                connection_data = select_plan_dialog(db, provider)
            except ManualConfigException:
                connection_data = manual_entry_dialog ()
        else:
            # --------------
            # Not Roaming...
            # --------------
            try:
                connection_data = select_plan_from_service_dialog(db, service)
            except ManualConfigException:
                connection_data = manual_entry_dialog ()

        try:
            try:
                service.SetProperty('APN', connection_data['name'])
            except KeyError:
                error_dialog(_("Missing required APN (service plan name)"))
            if 'username' in connection_data and connection_data['gateway']:
                service.SetProperty('Username', connection_data['username'][0])
            if 'password' in connection_data and connection_data['password']:
                service.SetProperty('Password', connection_data['password'][0])
            service.Connect()
        except CancelException:
            error_dialog("Unable to connect to 3G data service")
    except CancelException:
        sys.exit(-1)
        
if __name__ == '__main__':
    bus = dbus.SystemBus()
    options = ['service=', 'fakeservice=']
    (optlist, extra_args) = getopt.getopt(sys.argv[1:], '', options)

    services = []
    for arg in optlist:
        if arg[0] == '--service':
            try:
                service = dbus.Interface(bus.get_object("org.moblin.connman", arg[1]),
                                         "org.moblin.connman.Service")
                if service.GetProperties()["Type"] not in  ["cellular"]:
                    error_dialog(_("Internal Error: Invalid network service"))
                    services.append(service)
            except dbus.exceptions.DBusException:
                error_dialog(_("Critical Error: Invalid Service"))
        elif arg[0] == '--fakeservice':
            (name, mcc, mnc, roaming) = arg[1].split(':')
            services.append(FakeService(name, mcc, mnc, roaming)) 
    if not services:
        try:
            manager = dbus.Interface(bus.get_object("org.moblin.connman", "/"),
                                     "org.moblin.connman.Manager")
            for path in manager.GetProperties()["Services"]:
                s = dbus.Interface(bus.get_object("org.moblin.connman", path),
                                   "org.moblin.connman.Service")
                if s.GetProperties()["Type"] == 'cellular':
                    services.append(s)
        except dbus.exceptions.DBusException:
            error_dialog(_("Critical Error: Unable to access Connection Manager"))
    try:
        db = minidom.parse(urllib.urlopen(PROVIDER_DB))
    except IOError:
        error_dialog("Unable to open Mobile Provider Database: %s" % \
                         sys.argv[1])
    except ExpatError:
        error_dialog("Invalid Mobile Provider Database: %s" % \
                         sys.argv[1])

    if not services:
        error_dialog(_("ERROR: No 3G Hardware detected"))
    elif len(services) == 1:
        configure_service (services[0])
    else:
        configure_service (select_service_dialog (services))
